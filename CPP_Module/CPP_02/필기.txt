Orthodox Canonical Form

- 디폴트 생성자
- 복사 생성자
- 할당(대입) 연산자 오버로딩
- 소멸자

**** 복사 생성자 ****

Fixed::Fixed(const Fixed& fixed) //선언

Fixed a;
Fixed b(a); // a를 복사해 b를 생성했다.

- 따로 정의하지 않으면 디폴트 복사 생성자가 생성된다.
- 디폴트 복사 생성자는 얕은 복사를 하기 때문에 복사된 객체의 인스턴스 변수는 원본 객체의 인스턴스 변수와 같은 메모리 주소를 참조한다.
  따라서, 해당 메모리 주소의 값이 변경되면 원본 객체 및 복사 객체의 인스턴스 변수 값은 같이 변경된다.
- 복사 생성자를 새로 정의했다고 해서 다 깊은 복사가 되는 것이 아니다. 깊은 복사를 하고 싶다면 복사 생성자 내에 동적 할당된 새 객체가 있어야 한다.
  (깊은 복사: 객체를 복사 할 때, 해당 객체와 인스턴스 변수까지 복사하는 방식. 전부를 복사하여 새 주소에 담기 때문에 참조를 공유하지 않는다.)

- 복사 생성자 호출 시점 (https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=sonicheroes1&logNo=220705370161)
	- 기존에 생성된 객체를 이용해 새로운 객체를 초기화 하는 경우
	- Call-by-value 방식의 함수호출 과정에서 객체를 인자로 전달하는 경우
	- 같은 클래스의 다른 객체를 기반으로 객체를 구성하는 경우
	- 컴파일러가 임시 객체를 생성할 경우 (함수에서 객체를 반환하는데 참조형으로 반환하지 않은 경우)

**** 할당(대입) 연산자 오버로딩 ****

Fixed& operator=(const Fixed& fixed);

- 정의하지 않으면 디폴트 대입 생성자가 생긴다.
- 디폴트 대입 생성자는 얕은 복사를 한다.
- 대입 생성자 내에서 동적 할당을 하거나 깊은 복사가 필요하면 직접 정의를 해야 한다.
- 연산자 오버로딩 함수의 매개변수를 특정 객체로 선언했다면, = 연산자 오른쪽에 그 객체가 들어왔을 때만, 즉 올바른 인자를 대입했을 때 연산자가 오버로드 된다.


고정 소수점, 부동 소수점

- https://jiminish.tistory.com/81 => 두 개의 차이
- https://gsmesie692.tistory.com/94 => 소수점을 이진수로 나타내는 법


2항 연산자(+, -, /.....) 오버로딩
=> 매개변수는 오른쪽 항, ex) a + b <- Example& operator+(const Example& b);

<< 연산자 오버로딩
=> std::ostream& operator<<(std::ostream& out, const Example& b) {
	~~~
	return out;
}
* 반환 값이 ostream&인 out인 이유는 [ out << c1 << c2 == (cout << c1) << c2 == cout << c2 ]과 레퍼런스를 반환함으로써 불필요한 복사를 막기위해 *